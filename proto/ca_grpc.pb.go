// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CAManagerClient is the client API for CAManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CAManagerClient interface {
	CACertificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CAResponse, error)
	Certificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error)
	ListCertificates(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type cAManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCAManagerClient(cc grpc.ClientConnInterface) CAManagerClient {
	return &cAManagerClient{cc}
}

func (c *cAManagerClient) CACertificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CAResponse, error) {
	out := new(CAResponse)
	err := c.cc.Invoke(ctx, "/CAManager/CACertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cAManagerClient) Certificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error) {
	out := new(CertificateResponse)
	err := c.cc.Invoke(ctx, "/CAManager/Certificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cAManagerClient) ListCertificates(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/CAManager/ListCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CAManagerServer is the server API for CAManager service.
// All implementations must embed UnimplementedCAManagerServer
// for forward compatibility
type CAManagerServer interface {
	CACertificate(context.Context, *CertificateRequest) (*CAResponse, error)
	Certificate(context.Context, *CertificateRequest) (*CertificateResponse, error)
	ListCertificates(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedCAManagerServer()
}

// UnimplementedCAManagerServer must be embedded to have forward compatible implementations.
type UnimplementedCAManagerServer struct {
}

func (UnimplementedCAManagerServer) CACertificate(context.Context, *CertificateRequest) (*CAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CACertificate not implemented")
}
func (UnimplementedCAManagerServer) Certificate(context.Context, *CertificateRequest) (*CertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Certificate not implemented")
}
func (UnimplementedCAManagerServer) ListCertificates(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificates not implemented")
}
func (UnimplementedCAManagerServer) mustEmbedUnimplementedCAManagerServer() {}

// UnsafeCAManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CAManagerServer will
// result in compilation errors.
type UnsafeCAManagerServer interface {
	mustEmbedUnimplementedCAManagerServer()
}

func RegisterCAManagerServer(s grpc.ServiceRegistrar, srv CAManagerServer) {
	s.RegisterService(&CAManager_ServiceDesc, srv)
}

func _CAManager_CACertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAManagerServer).CACertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CAManager/CACertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAManagerServer).CACertificate(ctx, req.(*CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CAManager_Certificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAManagerServer).Certificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CAManager/Certificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAManagerServer).Certificate(ctx, req.(*CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CAManager_ListCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAManagerServer).ListCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CAManager/ListCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAManagerServer).ListCertificates(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CAManager_ServiceDesc is the grpc.ServiceDesc for CAManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CAManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CAManager",
	HandlerType: (*CAManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CACertificate",
			Handler:    _CAManager_CACertificate_Handler,
		},
		{
			MethodName: "Certificate",
			Handler:    _CAManager_Certificate_Handler,
		},
		{
			MethodName: "ListCertificates",
			Handler:    _CAManager_ListCertificates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ca.proto",
}
